# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master and develop branches.
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:        
  test:
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu-latest]
        
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: https://npm.pkg.github.com/
        scope: '@apy-finance'
        always-auth: true
    - name: Cache packages
      uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ./node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: npmrc
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GH_PERSONAL_TOKEN }}
      run: |
        touch .npmrc
        echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" >> .npmrc
        echo "@apy-finance:registry=https://npm.pkg.github.com" >> .npmrc
    - name: Install packages 
      run: yarn install
      if: steps.yarn-cache.outputs.cache-hit != 'true'
    - name: Install defi-legos
      run: yarn populate -m apy,centre,maker,tether
      env:
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    - name: Lint smart contracts
      run: yarn lint
    - name: Unit tests
      run: yarn test:unit
    - name: Integration tests 
      run: |
        yarn test:integration
      env: 
        INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
