{
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "AddLiquidityLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AddLiquidityUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "name": "DepositedAPT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RedeemLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RedeemUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValueLocked",
          "type": "uint256"
        }
      ],
      "name": "RedeemedAPT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agg",
          "type": "address"
        }
      ],
      "name": "TokenSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agg",
          "type": "address"
        }
      ],
      "name": "TokenUnsupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_APT_TO_UNDERLYER_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT128",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addLiquidityLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addLiquidityV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceAgg",
          "type": "address"
        }
      ],
      "name": "addTokenSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyerAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolTotalEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenAmountEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethValue",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenAmountFromEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenEthPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUnderlyerAmountV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockAddLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceAggs",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "aptAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "redeemV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeTokenSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        }
      ],
      "name": "setAdminAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyerAddress",
          "type": "address"
        }
      ],
      "name": "setUnderlyerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyer",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockAddLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xD9B189E60f26860e6607Fa03dF1A988216855627",
    "contractAddress": "0x626eb3134C7eB076F3E81f0F132e2aD020420f17",
    "transactionIndex": 1,
    "gasUsed": "4324895",
    "logsBloom": "0x
    "blockHash": "0xa5319a03eeeeb31b6704436aae7b17bc02690064f9b4a256f3db6bf817fabe6d",
    "transactionHash": "0x9e93523ea783f11a1a80d5bf97908d856affb2562930b74538192e9f5b1c307c",
    "logs": [],
    "blockNumber": 20946469,
    "cumulativeGasUsed": "4345895",
    "status": 1,
    "byzantium": true
  },
  "address": "0x626eb3134C7eB076F3E81f0F132e2aD020420f17",
  "args": [],
  "solcInputHash": "0xee808a235ed594e93d3e3e157678d27840bd3a16b8e81dda2e8db577f8aa3737",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"AddLiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddLiquidityUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"DepositedAPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RedeemLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RedeemUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"RedeemedAPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"}],\"name\":\"TokenSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"}],\"name\":\"TokenUnsupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_APT_TO_UNDERLYER_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT128\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addLiquidityV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceAgg\",\"type\":\"address\"}],\"name\":\"addTokenSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyerAmount\",\"type\":\"uint256\"}],\"name\":\"calculateMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenAmountEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenAmountFromEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUnderlyerAmountV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceAggs\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aptAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeemV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyerAddress\",\"type\":\"address\"}],\"name\":\"setUnderlyerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyer\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"addLiquidity(uint256)\":{\"details\":\"If no APT tokens have been minted yet, fallback to a fixed ratio.\"},\"addLiquidityV2(uint256,address)\":{\"details\":\"If no APT tokens have been minted yet, fallback to a fixed ratio.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getUnderlyerAmount(uint256)\":{\"params\":{\"aptAmount\":\"The amount of APT tokens\"},\"returns\":{\"_0\":\"uint256 The underlying value of the APT tokens\"}},\"getUnderlyerAmountV2(uint256,address)\":{\"params\":{\"aptAmount\":\"The amount of APT tokens\"},\"returns\":{\"_0\":\"uint256 The underlying value of the APT tokens\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(uint256)\":{\"params\":{\"aptAmount\":\"The amount of APT tokens to redeem\"}},\"redeemV2(uint256,address)\":{\"params\":{\"aptAmount\":\"The amount of APT tokens to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUnderlyerAddress(address)\":{\"details\":\"called during deployment\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"addLiquidity(uint256)\":{\"notice\":\"Mint corresponding amount of APT supported for sent token amount.\"},\"addLiquidityV2(uint256,address)\":{\"notice\":\"Mint corresponding amount of APT tokens for sent token amount.\"},\"getUnderlyerAmount(uint256)\":{\"notice\":\"Get the underlying amount represented by APT amount.\"},\"getUnderlyerAmountV2(uint256,address)\":{\"notice\":\"Get the underlying amount represented by APT amount.\"},\"redeem(uint256)\":{\"notice\":\"Redeems APT amount for its underlying token amount.\"},\"redeemV2(uint256,address)\":{\"notice\":\"Redeems APT amount for its underlying token amount.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/APYLiquidityPoolImplementation.sol\":\"APYLiquidityPoolImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x12f0e35e0320088f2110173226860e44309766c0f7022a2433efdebd5bf1a002\"},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x9c2d859bc9de93ced0875d226598e56067fe4d6b2dde0e1fd53ca60fa9603db0\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     * \\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x302c3404769f7a5a3d68a7035b9ed71a4b1f8a1669afa7895558a11b6accebfa\"},\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n * \\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n * \\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n * \\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n * \\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address _admin, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(_admin);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * \\n     * Emits an {AdminChanged} event.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal override virtual {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xca5ae7ca3cf7170f67ddd4610eea87a4a6523b51f35d992e6f79096cf5ea5789\"},\"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     * \\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba553079916cc29b5a5b49d99d9ed316d795d0146bc429ea3ca43c9f38579481\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    return int64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    require (x >= 0);\\n    return uint64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    int256 result = x >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    return int256 (x) << 64;\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) + y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) - y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    if (x == MIN_64x64) {\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\n      return -y << 63;\\n    } else {\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x;\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <=\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <=\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (absoluteResult);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    if (y == 0) return 0;\\n\\n    require (x >= 0);\\n\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n    uint256 hi = uint256 (x) * (y >> 128);\\n\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    hi <<= 64;\\n\\n    require (hi <=\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n    return hi + lo;\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    require (y != 0);\\n    int256 result = (int256 (x) << 64) / y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    require (y != 0);\\n\\n    bool negativeResult = false;\\n    if (x < 0) {\\n      x = -x; // We rely on overflow behavior here\\n      negativeResult = true;\\n    }\\n    if (y < 0) {\\n      y = -y; // We rely on overflow behavior here\\n      negativeResult = !negativeResult;\\n    }\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    require (y != 0);\\n    uint128 result = divuu (x, y);\\n    require (result <= uint128 (MAX_64x64));\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return -x;\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return x < 0 ? -x : x;\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    require (x != 0);\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    int256 m = int256 (x) * int256 (y);\\n    require (m >= 0);\\n    require (m <\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\n    return int128 (sqrtu (uint256 (m)));\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    uint256 absoluteResult;\\n    bool negativeResult = false;\\n    if (x >= 0) {\\n      absoluteResult = powu (uint256 (x) << 63, y);\\n    } else {\\n      // We rely on overflow behavior here\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\n      negativeResult = y & 1 > 0;\\n    }\\n\\n    absoluteResult >>= 63;\\n\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    require (x >= 0);\\n    return int128 (sqrtu (uint256 (x) << 64));\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    int256 msb = 0;\\n    int256 xc = x;\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n    int256 result = msb - 64 << 64;\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n      ux *= ux;\\n      uint256 b = ux >> 255;\\n      ux >>= 127 + b;\\n      result += bit * int256 (b);\\n    }\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    return int128 (\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    uint256 result = 0x80000000000000000000000000000000;\\n\\n    if (x & 0x8000000000000000 > 0)\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n    if (x & 0x4000000000000000 > 0)\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n    if (x & 0x2000000000000000 > 0)\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n    if (x & 0x1000000000000000 > 0)\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n    if (x & 0x800000000000000 > 0)\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n    if (x & 0x400000000000000 > 0)\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n    if (x & 0x200000000000000 > 0)\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n    if (x & 0x100000000000000 > 0)\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n    if (x & 0x80000000000000 > 0)\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n    if (x & 0x40000000000000 > 0)\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n    if (x & 0x20000000000000 > 0)\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n    if (x & 0x10000000000000 > 0)\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n    if (x & 0x8000000000000 > 0)\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n    if (x & 0x4000000000000 > 0)\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n    if (x & 0x2000000000000 > 0)\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n    if (x & 0x1000000000000 > 0)\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n    if (x & 0x800000000000 > 0)\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n    if (x & 0x400000000000 > 0)\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n    if (x & 0x200000000000 > 0)\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n    if (x & 0x100000000000 > 0)\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n    if (x & 0x80000000000 > 0)\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n    if (x & 0x40000000000 > 0)\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n    if (x & 0x20000000000 > 0)\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n    if (x & 0x10000000000 > 0)\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n    if (x & 0x8000000000 > 0)\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n    if (x & 0x4000000000 > 0)\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n    if (x & 0x2000000000 > 0)\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n    if (x & 0x1000000000 > 0)\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n    if (x & 0x800000000 > 0)\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n    if (x & 0x400000000 > 0)\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n    if (x & 0x200000000 > 0)\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n    if (x & 0x100000000 > 0)\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n    if (x & 0x80000000 > 0)\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n    if (x & 0x40000000 > 0)\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n    if (x & 0x20000000 > 0)\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n    if (x & 0x10000000 > 0)\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n    if (x & 0x8000000 > 0)\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n    if (x & 0x4000000 > 0)\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n    if (x & 0x2000000 > 0)\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n    if (x & 0x1000000 > 0)\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n    if (x & 0x800000 > 0)\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n    if (x & 0x400000 > 0)\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n    if (x & 0x200000 > 0)\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n    if (x & 0x100000 > 0)\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n    if (x & 0x80000 > 0)\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n    if (x & 0x40000 > 0)\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n    if (x & 0x20000 > 0)\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n    if (x & 0x10000 > 0)\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n    if (x & 0x8000 > 0)\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n    if (x & 0x4000 > 0)\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n    if (x & 0x2000 > 0)\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n    if (x & 0x1000 > 0)\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n    if (x & 0x800 > 0)\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n    if (x & 0x400 > 0)\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n    if (x & 0x200 > 0)\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n    if (x & 0x100 > 0)\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n    if (x & 0x80 > 0)\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n    if (x & 0x40 > 0)\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n    if (x & 0x20 > 0)\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n    if (x & 0x10 > 0)\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n    if (x & 0x8 > 0)\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n    if (x & 0x4 > 0)\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n    if (x & 0x2 > 0)\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n    if (x & 0x1 > 0)\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n    result >>= uint256 (63 - (x >> 64));\\n    require (result <= uint256 (MAX_64x64));\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    return exp_2 (\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    require (y != 0);\\n\\n    uint256 result;\\n\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n      result = (x << 64) / y;\\n    else {\\n      uint256 msb = 192;\\n      uint256 xc = x >> 192;\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 hi = result * (y >> 128);\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 xh = x >> 192;\\n      uint256 xl = x << 64;\\n\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n      lo = hi << 128;\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n\\n      assert (xh == hi >> 128);\\n\\n      result += xl / y;\\n    }\\n\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    return uint128 (result);\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x unsigned 129.127-bit fixed point number\\n   * @param y uint256 value\\n   * @return unsigned 129.127-bit fixed point number\\n   */\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n    if (y == 0) return 0x80000000000000000000000000000000;\\n    else if (x == 0) return 0;\\n    else {\\n      int256 msb = 0;\\n      uint256 xc = x;\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 xe = msb - 127;\\n      if (xe > 0) x >>= uint256 (xe);\\n      else x <<= uint256 (-xe);\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n      int256 re = 0;\\n\\n      while (y > 0) {\\n        if (y & 1 > 0) {\\n          result = result * x;\\n          y -= 1;\\n          re += xe;\\n          if (result >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            result >>= 128;\\n            re += 1;\\n          } else result >>= 127;\\n          if (re < -127) return 0; // Underflow\\n          require (re < 128); // Overflow\\n        } else {\\n          x = x * x;\\n          y >>= 1;\\n          xe <<= 1;\\n          if (x >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            x >>= 128;\\n            xe += 1;\\n          } else x >>= 127;\\n          if (xe < -127) return 0; // Underflow\\n          require (xe < 128); // Overflow\\n        }\\n      }\\n\\n      if (re > 0) result <<= uint256 (re);\\n      else if (re < 0) result >>= uint256 (-re);\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    if (x == 0) return 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n      if (xx >= 0x8) { r <<= 1; }\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\n      uint256 r1 = x / r;\\n      return uint128 (r < r1 ? r : r1);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x67609bc0923563d05d3a8a7c681056f9702a92120777cb0bcbb40d0afbb4a015\"},\"contracts/APYLiquidityPoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {\\n    TransparentUpgradeableProxy\\n} from \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport \\\"./interfaces/ILiquidityPool.sol\\\";\\n\\ncontract APYLiquidityPoolImplementation is\\n    ILiquidityPool,\\n    Initializable,\\n    OwnableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    PausableUpgradeSafe,\\n    ERC20UpgradeSafe\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ABDKMath64x64 for *;\\n\\n    uint256 public constant DEFAULT_APT_TO_UNDERLYER_FACTOR = 1000;\\n    uint192 public constant MAX_UINT128 = uint128(-1);\\n\\n    /* ------------------------------- */\\n    /* impl-specific storage variables */\\n    /* ------------------------------- */\\n    address public proxyAdmin;\\n    bool public addLiquidityLock;\\n    bool public redeemLock;\\n    IERC20 public underlyer;\\n    mapping(IERC20 => AggregatorV3Interface) public priceAggs;\\n    IERC20[] internal _supportedTokens;\\n\\n    /* ------------------------------- */\\n\\n    function initialize() public initializer {\\n        // initialize ancestor storage\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained(\\\"APY Pool Token\\\", \\\"APT\\\");\\n\\n        // initialize impl-specific storage\\n        addLiquidityLock = false;\\n        redeemLock = false;\\n        // admin and underlyer will get set by deployer\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initializeUpgrade() public virtual onlyAdmin {}\\n\\n    function setAdminAddress(address adminAddress) public onlyOwner {\\n        proxyAdmin = adminAddress;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == proxyAdmin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    function lock() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unlock() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"DONT_SEND_ETHER\\\");\\n    }\\n\\n    function addTokenSupport(IERC20 token, AggregatorV3Interface priceAgg)\\n        external\\n        onlyOwner\\n    {\\n        require(address(token) != address(0), \\\"INVALID_TOKEN\\\");\\n        require(address(priceAgg) != address(0), \\\"INVALID_AGG\\\");\\n        priceAggs[token] = priceAgg;\\n        _supportedTokens.push(token);\\n        emit TokenSupported(address(token), address(priceAgg));\\n    }\\n\\n    function removeTokenSupport(IERC20 token) external onlyOwner {\\n        require(address(token) != address(0), \\\"INVALID_TOKEN\\\");\\n        emit TokenUnsupported(address(token), address(priceAggs[token]));\\n        delete priceAggs[token];\\n        // zero out the supportedToken in the list\\n        for (uint256 i = 0; i < _supportedTokens.length; i++) {\\n            if (_supportedTokens[i] == token) {\\n                _supportedTokens[i] = IERC20(address(0));\\n                return;\\n            }\\n        }\\n    }\\n\\n    function getSupportedTokens() external view returns (IERC20[] memory) {\\n        IERC20[] memory returnList = new IERC20[](_supportedTokens.length);\\n        for (uint256 i = 0; i < _supportedTokens.length; i++) {\\n            returnList[i] = _supportedTokens[i];\\n        }\\n        return returnList;\\n    }\\n\\n    /**\\n     * @notice Mint corresponding amount of APT supported for sent token amount.\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     */\\n    function addLiquidity(uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(amount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(\\n            underlyer.allowance(msg.sender, address(this)) >= amount,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n        uint256 totalAmount = underlyer.balanceOf(address(this));\\n        uint256 mintAmount = _calculateMintAmount(amount, totalAmount);\\n\\n        _mint(msg.sender, mintAmount);\\n        underlyer.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositedAPT(msg.sender, mintAmount, amount, totalAmount);\\n    }\\n\\n    /**\\n     * @notice Mint corresponding amount of APT tokens for sent token amount.\\n     * @dev If no APT tokens have been minted yet, fallback to a fixed ratio.\\n     */\\n    function addLiquidityV2(uint256 amount, IERC20 token)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!addLiquidityLock, \\\"LOCKED\\\");\\n        require(amount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(address(priceAggs[token]) != address(0), \\\"UNSUPPORTED_TOKEN\\\");\\n        require(\\n            token.allowance(msg.sender, address(this)) >= amount,\\n            \\\"ALLOWANCE_INSUFFICIENT\\\"\\n        );\\n\\n        uint256 depositEthValue = getTokenAmountEthValue(amount, token);\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n\\n        uint256 mintAmount = _calculateMintAmount(\\n            depositEthValue,\\n            poolTotalEthValue\\n        );\\n\\n        _mint(msg.sender, mintAmount);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit DepositedAPT(msg.sender, mintAmount, amount, poolTotalEthValue);\\n    }\\n\\n    function getPoolTotalEthValue() public view returns (uint256) {\\n        uint256 poolTotalEthValue;\\n        for (uint256 i = 0; i < _supportedTokens.length; i++) {\\n            // skip over removed tokens\\n            if (address(_supportedTokens[i]) == address(0)) {\\n                continue;\\n            }\\n\\n            IERC20 token = _supportedTokens[i];\\n            uint256 tokenEthValue = getTokenAmountEthValue(\\n                token.balanceOf(address(this)),\\n                token\\n            );\\n            poolTotalEthValue = poolTotalEthValue.add(tokenEthValue);\\n        }\\n        return poolTotalEthValue;\\n    }\\n\\n    function getTokenAmountEthValue(uint256 amount, IERC20 token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenEthPrice = uint256(getTokenEthPrice(token));\\n        uint256 decimals = ERC20UpgradeSafe(address(token)).decimals();\\n        uint256 ethValue = tokenEthPrice.divu(uint256(10)**decimals).mulu(\\n            amount\\n        );\\n        return ethValue;\\n    }\\n\\n    function getTokenAmountFromEthValue(uint256 ethValue, IERC20 token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenEthPrice = uint256(getTokenEthPrice(token));\\n        uint256 decimals = ERC20UpgradeSafe(address(token)).decimals();\\n        uint256 tokenAmount = ethValue.divu(tokenEthPrice).mulu(\\n            uint256(10)**decimals\\n        );\\n        return tokenAmount;\\n    }\\n\\n    function getTokenEthPrice(IERC20 token) public view returns (int256) {\\n        AggregatorV3Interface agg = priceAggs[token];\\n        (, int256 price, , , ) = agg.latestRoundData();\\n        require(price > 0, \\\"UNABLE_TO_RETRIEVE_ETH_PRICE\\\");\\n        return price;\\n    }\\n\\n    function lockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = true;\\n        emit AddLiquidityLocked();\\n    }\\n\\n    function unlockAddLiquidity() external onlyOwner {\\n        addLiquidityLock = false;\\n        emit AddLiquidityUnlocked();\\n    }\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying token amount.\\n     * @param aptAmount The amount of APT tokens to redeem\\n     */\\n    function redeem(uint256 aptAmount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 underlyerAmount = getUnderlyerAmount(aptAmount);\\n\\n        _burn(msg.sender, aptAmount);\\n        underlyer.transfer(msg.sender, underlyerAmount);\\n\\n        emit RedeemedAPT(msg.sender, aptAmount, underlyerAmount, underlyer.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Redeems APT amount for its underlying token amount.\\n     * @param aptAmount The amount of APT tokens to redeem\\n     */\\n    function redeemV2(uint256 aptAmount, IERC20 token)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(!redeemLock, \\\"LOCKED\\\");\\n        require(aptAmount > 0, \\\"AMOUNT_INSUFFICIENT\\\");\\n        require(aptAmount <= balanceOf(msg.sender), \\\"BALANCE_INSUFFICIENT\\\");\\n\\n        uint256 underlyerAmount = getUnderlyerAmountV2(aptAmount, token);\\n\\n        _burn(msg.sender, aptAmount);\\n        token.safeTransfer(msg.sender, underlyerAmount);\\n\\n        emit RedeemedAPT(msg.sender, aptAmount, underlyerAmount, getPoolTotalEthValue());\\n    }\\n\\n    function lockRedeem() external onlyOwner {\\n        redeemLock = true;\\n        emit RedeemLocked();\\n    }\\n\\n    function unlockRedeem() external onlyOwner {\\n        redeemLock = false;\\n        emit RedeemUnlocked();\\n    }\\n\\n    /// @dev called during deployment\\n    function setUnderlyerAddress(address underlyerAddress) public onlyOwner {\\n        underlyer = IERC20(underlyerAddress);\\n    }\\n\\n    function calculateMintAmount(uint256 underlyerAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 underlyerTotal = underlyer.balanceOf(address(this));\\n        return _calculateMintAmount(underlyerAmount, underlyerTotal);\\n    }\\n\\n    /**\\n     *  @notice amount of APT minted should be in same ratio to APT supply\\n     *          as token amount sent is to contract's token balance, i.e.:\\n     *\\n     *          mint amount / total supply (before deposit)\\n     *          = token amount sent / contract token balance (before deposit)\\n     */\\n    function _calculateMintAmount(uint256 amount, uint256 totalAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = totalSupply();\\n\\n        if (totalAmount == 0 || totalSupply == 0) {\\n            return amount.mul(DEFAULT_APT_TO_UNDERLYER_FACTOR);\\n        }\\n\\n        require(amount <= MAX_UINT128, \\\"AMOUNT_OVERFLOW\\\");\\n        require(totalAmount <= MAX_UINT128, \\\"TOTAL_AMOUNT_OVERFLOW\\\");\\n        require(totalSupply <= MAX_UINT128, \\\"TOTAL_SUPPLY_OVERFLOW\\\");\\n\\n        return amount.divu(totalAmount).mulu(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlying value of the APT tokens\\n     */\\n    function getUnderlyerAmount(uint256 aptAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        int128 shareOfAPT = _getShareOfAPT(aptAmount);\\n\\n        uint256 underlyerTotal = underlyer.balanceOf(address(this));\\n        require(underlyerTotal <= MAX_UINT128, \\\"UNDERLYER_TOTAL_OVERFLOW\\\");\\n\\n        return shareOfAPT.mulu(underlyerTotal);\\n    }\\n\\n    /**\\n     * @notice Get the underlying amount represented by APT amount.\\n     * @param aptAmount The amount of APT tokens\\n     * @return uint256 The underlying value of the APT tokens\\n     */\\n    function getUnderlyerAmountV2(uint256 aptAmount, IERC20 token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        int128 shareOfAPT = _getShareOfAPT(aptAmount);\\n\\n        uint256 poolTotalEthValue = getPoolTotalEthValue();\\n        require(poolTotalEthValue <= MAX_UINT128, \\\"UNDERLYER_TOTAL_OVERFLOW\\\");\\n\\n        uint256 tokenEthValue = shareOfAPT.mulu(poolTotalEthValue);\\n        uint256 tokenAmount = getTokenAmountFromEthValue(tokenEthValue, token);\\n        return tokenAmount;\\n    }\\n\\n    function _getShareOfAPT(uint256 amount) internal view returns (int128) {\\n        require(amount <= MAX_UINT128, \\\"AMOUNT_OVERFLOW\\\");\\n        require(totalSupply() > 0, \\\"INSUFFICIENT_TOTAL_SUPPLY\\\");\\n        require(totalSupply() <= MAX_UINT128, \\\"TOTAL_SUPPLY_OVERFLOW\\\");\\n\\n        int128 shareOfApt = amount.divu(totalSupply());\\n        return shareOfApt;\\n    }\\n}\\n\\n/**\\n * @dev Proxy contract to test internal variables and functions\\n *      Should not be used other than in test files!\\n */\\ncontract APYLiquidityPoolImplementationTEST is APYLiquidityPoolImplementation {\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x946566c6a74d57c0f534528c056f2b2fe34c95f55476741a2a4080b8b10c0dc2\"},\"contracts/interfaces/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.6;\\n\\ninterface ILiquidityPool {\\n    event DepositedAPT(\\n        address indexed sender,\\n        uint256 aptAmount,\\n        uint256 underlyerAmount,\\n        uint256 totalValueLocked\\n    );\\n    event RedeemedAPT(\\n        address indexed sender,\\n        uint256 aptAmount,\\n        uint256 underlyerAmount,\\n        uint256 totalValueLocked\\n    );\\n    event TokenSupported(address token, address agg);\\n    event TokenUnsupported(address token, address agg);\\n    event AddLiquidityLocked();\\n    event AddLiquidityUnlocked();\\n    event RedeemLocked();\\n    event RedeemUnlocked();\\n\\n    function addLiquidity(uint256 amount) external;\\n\\n    function redeem(uint256 tokenAmount) external;\\n}\\n\",\"keccak256\":\"0x73c9453577c164d5795ae6cb4efb76eef4c4d44e83268992513cf7eb239bb05a\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614de5806100206000396000f3fe6080604052600436106103015760003560e01c80637758f3fa1161018f578063a9059cbb116100e1578063e12799b11161008a578063f2fde38b11610064578063f2fde38b1461081a578063f83d08ba1461083a578063fa55819e1461084f57610341565b8063e12799b1146107d0578063ecb2bd76146107e5578063efe707a8146107fa57610341565b8063db006a75116100bb578063db006a7514610770578063dd62ed3e14610790578063df00018d146107b057610341565b8063a9059cbb1461070e578063c90b121a1461072e578063d3c7c2c71461074e57610341565b80638129fc1c116101435780639b38ee261161011d5780639b38ee26146106b9578063a457c2d7146106d9578063a69df4b5146106f957610341565b80638129fc1c1461067a5780638da5cb5b1461068f57806395d89b41146106a457610341565b80637d30c3e5116101745780637d30c3e51461061a5780637f8888161461063a5780637fa76bd71461065a57610341565b80637758f3fa146105f05780637b4361741461060557610341565b8063352110c01161025357806352631aea116101fc57806360b330ea116101d657806360b330ea146105a657806370a08231146105bb578063715018a6146105db57610341565b806352631aea1461054f5780635c975abb146105715780635ccf7ac41461058657610341565b80633e47158c1161022d5780633e47158c146104f85780634ee446081461051a57806351c6590a1461052f57610341565b8063352110c0146104a357806337929915146104c357806339509351146104d857610341565b806318160ddd116102b55780632ba8d9391161028f5780632ba8d939146104415780632c1e816d14610461578063313ce5671461048157610341565b806318160ddd146103ec57806323b872dd14610401578063267824e01461042157610341565b8063095ea7b3116102e6578063095ea7b314610388578063099ed69a146103b557806310aad3a9146103ca57610341565b806303edfcbd1461034657806306fdde031461035d57610341565b36610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614553565b60405180910390fd5b600080fd5b34801561035257600080fd5b5061035b61086f565b005b34801561036957600080fd5b50610372610937565b60405161037f9190614400565b60405180910390f35b34801561039457600080fd5b506103a86103a33660046141b4565b6109ec565b60405161037f91906143ec565b3480156103c157600080fd5b5061035b610a0a565b3480156103d657600080fd5b506103df610aba565b60405161037f91906143f7565b3480156103f857600080fd5b506103df610ac0565b34801561040d57600080fd5b506103a861041c366004614174565b610ac6565b34801561042d57600080fd5b506103df61043c366004614241565b610b6d565b34801561044d57600080fd5b5061035b61045c366004614120565b610c33565b34801561046d57600080fd5b5061035b61047c366004614120565b610e50565b34801561048d57600080fd5b50610496610ef4565b60405161037f9190614cbe565b3480156104af57600080fd5b506103df6104be366004614241565b610efe565b3480156104cf57600080fd5b5061035b610f91565b3480156104e457600080fd5b506103a86104f33660046141b4565b611041565b34801561050457600080fd5b5061050d6110a2565b60405161037f91906142f3565b34801561052657600080fd5b506103a86110bf565b34801561053b57600080fd5b5061035b61054a366004614211565b6110e1565b34801561055b57600080fd5b50610564611463565b60405161037f9190614c83565b34801561057d57600080fd5b506103a8611477565b34801561059257600080fd5b5061035b6105a13660046141ff565b611480565b3480156105b257600080fd5b506103a8611642565b3480156105c757600080fd5b506103df6105d6366004614120565b611665565b3480156105e757600080fd5b5061035b61168d565b3480156105fc57600080fd5b5061050d611758565b34801561061157600080fd5b5061035b611775565b34801561062657600080fd5b506103df610635366004614211565b61183c565b34801561064657600080fd5b506103df610655366004614211565b6118fb565b34801561066657600080fd5b5061035b610675366004614120565b611a1c565b34801561068657600080fd5b5061035b611ac0565b34801561069b57600080fd5b5061050d611c71565b3480156106b057600080fd5b50610372611c8d565b3480156106c557600080fd5b5061035b6106d4366004614241565b611d0c565b3480156106e557600080fd5b506103a86106f43660046141b4565b611efa565b34801561070557600080fd5b5061035b611f75565b34801561071a57600080fd5b506103a86107293660046141b4565b611fdb565b34801561073a57600080fd5b506103df610749366004614241565b611fef565b34801561075a57600080fd5b5061076361209c565b60405161037f9190614392565b34801561077c57600080fd5b5061035b61078b366004614211565b61216e565b34801561079c57600080fd5b506103df6107ab36600461413c565b6124ba565b3480156107bc57600080fd5b506103df6107cb366004614120565b6124f2565b3480156107dc57600080fd5b5061035b6125e8565b3480156107f157600080fd5b506103df61263a565b34801561080657600080fd5b5061050d610815366004614120565b612787565b34801561082657600080fd5b5061035b610835366004614120565b6127b0565b34801561084657600080fd5b5061035b6128e7565b34801561085b57600080fd5b5061035b61086a366004614241565b61294b565b610877612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146108cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790556040517fdc9e8a8421142a9ed626a213703c3c3ea7ac9d321094c3a8239784961857a87f90600090a1565b60fe8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050505090505b90565b6000610a006109f9612c97565b8484612c9b565b5060015b92915050565b610a12612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690556040517ff0261bb347838e4107df59bd80ad09cf7a3703e484bd3cd4167634c1d41e60c690600090a1565b6103e881565b60fd5490565b6000610ad3848484612daa565b610b6384610adf612c97565b610b5e85604051806060016040528060288152602001614d636028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260fc6020526040812090610b2a612c97565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff612f4016565b612c9b565b5060019392505050565b600080610b79836124f2565b905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906142b6565b60ff1690506000610c2986610c1a85600a86900a63ffffffff612f8616565b600f0b9063ffffffff612fcf16565b9695505050505050565b610c3b612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8116610cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061478e565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261012f6020526040908190205490517fe1d81e4ca82f175dfdce152bfeb5c2b4d3bf71dc7fccf6283c55bd27e6a22ae592610d38928592911690614314565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff8116600090815261012f6020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b61013054811015610e4b578173ffffffffffffffffffffffffffffffffffffffff166101308281548110610dbd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610e435760006101308281548110610df557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610e4d565b600101610d8d565b505b50565b610e58612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101005460ff1690565b600080610f0a84613051565b90506000610f1661263a565b90506fffffffffffffffffffffffffffffffff811115610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614757565b6000610f78600f84900b8363ffffffff612fcf16565b90506000610f868287611fef565b979650505050505050565b610f99612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f8710e363d0b73d2b34e9c5db1cfdeac689eda396272ebb0996410c22a32bb52090600090a1565b6000610a0061104e612c97565b84610b5e8560fc600061105f612c97565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61314916565b61012d5473ffffffffffffffffffffffffffffffffffffffff1681565b61012d5474010000000000000000000000000000000000000000900460ff1681565b60975460ff1661111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff1615611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d5474010000000000000000000000000000000000000000900460ff16156111d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008111611212576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b61012e546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9061126b9033903090600401614314565b60206040518083038186803b15801561128357600080fd5b505afa158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb9190614229565b10156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614720565b61012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319061134b9030906004016142f3565b60206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190614229565b905060006113a98383613188565b90506113b533826132b1565b61012e546113e19073ffffffffffffffffffffffffffffffffffffffff1633308663ffffffff6133be16565b3373ffffffffffffffffffffffffffffffffffffffff167fa1191a508aeb71ebb602bcbf73ee2faa335fb7116351aed59b3a76e1199395b682858560405161142b93929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b6fffffffffffffffffffffffffffffffff81565b60c95460ff1690565b611488612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146114dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8216611529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061478e565b73ffffffffffffffffffffffffffffffffffffffff8116611576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614831565b73ffffffffffffffffffffffffffffffffffffffff808316600081815261012f602052604080822080549486167fffffffffffffffffffffffff0000000000000000000000000000000000000000958616179055610130805460018101825592527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf349091018054909316909117909155517f7a043b40c33a3ae419ba0582985274add1f9af1868414daccfa46d00b792a604906116369084908490614314565b60405180910390a15050565b61012d547501000000000000000000000000000000000000000000900460ff1681565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fb602052604090205490565b611695612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146116e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b60655460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b61012e5473ffffffffffffffffffffffffffffffffffffffff1681565b61177d612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146117d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517f74575b08abfa9e3fb5439ba1f85bc043f5a282e848d6ac9b58f7fe054a72e49590600090a1565b61012e546040517f70a08231000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906118989030906004016142f3565b60206040518083038186803b1580156118b057600080fd5b505afa1580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e89190614229565b90506118f48382613188565b9392505050565b60008061190783613051565b61012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906119649030906004016142f3565b60206040518083038186803b15801561197c57600080fd5b505afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190614229565b90506fffffffffffffffffffffffffffffffff811115611a00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614757565b611a14600f83900b8263ffffffff612fcf16565b949350505050565b611a24612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614611a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff1680611ad95750611ad9613467565b80611ae7575060005460ff16155b611b1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff16158015611b8357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b611b8b61346d565b611b93613561565b611b9b6136d2565b611ba36137f1565b611c176040518060400160405280600e81526020017f41505920506f6f6c20546f6b656e0000000000000000000000000000000000008152506040518060400160405280600381526020017f415054000000000000000000000000000000000000000000000000000000000081525061390d565b61012d80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1690558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60655473ffffffffffffffffffffffffffffffffffffffff1690565b60ff8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109e15780601f106109b6576101008083540402835291602001916109e1565b60975460ff16611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff1615611dad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d547501000000000000000000000000000000000000000000900460ff1615611e04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008211611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b611e4733611665565b821115611e80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061458a565b6000611e8c8383610efe565b9050611e983384613a58565b611ebf73ffffffffffffffffffffffffffffffffffffffff8316338363ffffffff613b8816565b337ffc57247add5757285c9d2af9251b2bb72a1b63dd5a4b341004bf915f753d01248483611eeb61263a565b60405161142b93929190614ca8565b6000610a00611f07612c97565b84610b5e85604051806060016040528060258152602001614d8b6025913960fc6000611f31612c97565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff612f4016565b611f7d612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b611fd9613ba7565b565b6000610a00611fe8612c97565b8484612daa565b600080611ffb836124f2565b905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561204557600080fd5b505afa158015612059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207d91906142b6565b60ff1690506000610c29600a83900a610c1a888663ffffffff612f8616565b61013054606090819067ffffffffffffffff811180156120bb57600080fd5b506040519080825280602002602001820160405280156120e5578160200160208202803683370190505b50905060005b6101305481101561216857610130818154811061210457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061213b57fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016120eb565b50905090565b60975460ff166121aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff161561220f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d547501000000000000000000000000000000000000000000900460ff1615612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b600081116122a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b6122a933611665565b8111156122e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061458a565b60006122ed826118fb565b90506122f93383613a58565b61012e546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90612352903390859060040161433b565b602060405180830381600087803b15801561236c57600080fd5b505af1158015612380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a491906141df565b5061012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815233917ffc57247add5757285c9d2af9251b2bb72a1b63dd5a4b341004bf915f753d0124918591859173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906124249030906004016142f3565b60206040518083038186803b15801561243c57600080fd5b505afa158015612450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124749190614229565b60405161248393929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260fc6020908152604080832093909416825291909152205490565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261012f60205260408082205481517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151929316918391839163feaf968c9160048082019260a092909190829003018186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190614265565b505050915050600081136118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061467b565b61012d5473ffffffffffffffffffffffffffffffffffffffff163314611fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906149eb565b600080805b6101305481101561216857600073ffffffffffffffffffffffffffffffffffffffff16610130828154811061267057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561269d5761277f565b600061013082815481106126ad57fe5b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911692506127689083906370a08231906127129030906004016142f3565b60206040518083038186803b15801561272a57600080fd5b505afa15801561273e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127629190614229565b83610b6d565b905061277a848263ffffffff61314916565b935050505b60010161263f565b61012f6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6127b8612c97565b60655473ffffffffffffffffffffffffffffffffffffffff90811691161461280c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8116612859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906145c1565b60655460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6128ef612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614612943576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b611fd9613c4b565b60975460ff16612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff16156129ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d5474010000000000000000000000000000000000000000900460ff1615612a42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008211612a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b73ffffffffffffffffffffffffffffffffffffffff818116600090815261012f602052604090205416612adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614b13565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e90612b319033903090600401614314565b60206040518083038186803b158015612b4957600080fd5b505afa158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b819190614229565b1015612bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614720565b6000612bc58383610b6d565b90506000612bd161263a565b90506000612bdf8383613188565b9050612beb33826132b1565b612c1373ffffffffffffffffffffffffffffffffffffffff851633308863ffffffff6133be16565b3373ffffffffffffffffffffffffffffffffffffffff167fa1191a508aeb71ebb602bcbf73ee2faa335fb7116351aed59b3a76e1199395b6828785604051612c5d93929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316612ce8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614a7f565b73ffffffffffffffffffffffffffffffffffffffff8216612d35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061461e565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260fc602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612d9d9085906143f7565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316612df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614a22565b73ffffffffffffffffffffffffffffffffffffffff8216612e44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614488565b612e4f838383613a53565b612e9f81604051806060016040528060268152602001614d3d6026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260fb6020526040902054919063ffffffff612f4016565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260fb60205260408082209390935590841681522054612ee1908263ffffffff61314916565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260fb602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612d9d9085906143f7565b60008184841115612f7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389190614400565b505050900390565b600081612f9257600080fd5b6000612f9e8484613cdc565b90506f7fffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff821611156118f457600080fd5b600081612fde57506000610a04565b600083600f0b1215612fef57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff81111561303857600080fd5b60401b811981111561304957600080fd5b019392505050565b60006fffffffffffffffffffffffffffffffff82111561309d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614868565b60006130a7610ac0565b116130de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614adc565b6fffffffffffffffffffffffffffffffff6130f7610ac0565b111561312f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146b2565b60006118f461313c610ac0565b849063ffffffff612f8616565b6000828201838110156118f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146e9565b600080613193610ac0565b90508215806131a0575080155b156131bf576131b7846103e863ffffffff613e5216565b915050610a04565b6fffffffffffffffffffffffffffffffff841115613209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614868565b6fffffffffffffffffffffffffffffffff831115613253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614451565b6fffffffffffffffffffffffffffffffff81111561329d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146b2565b611a1481610c1a868663ffffffff612f8616565b73ffffffffffffffffffffffffffffffffffffffff82166132fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614c4c565b61330a60008383613a53565b60fd5461331d908263ffffffff61314916565b60fd5573ffffffffffffffffffffffffffffffffffffffff8216600090815260fb6020526040902054613356908263ffffffff61314916565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260fb60205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133b29085906143f7565b60405180910390a35050565b613461846323b872dd60e01b8585856040516024016133df93929190614361565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ea6565b50505050565b303b1590565b600054610100900460ff16806134865750613486613467565b80613494575060005460ff16155b6134ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561353057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061357a575061357a613467565b80613588575060005460ff16155b6135be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561362457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061362e612c97565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff16806136eb57506136eb613467565b806136f9575060005460ff16155b61372f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561379557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061380a575061380a613467565b80613818575060005460ff16155b61384e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff161580156138b457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff16806139265750613926613467565b80613934575060005460ff16155b61396a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff161580156139d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b82516139e39060fe90602086019061406e565b5081516139f79060ff90602085019061406e565b5061010080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660121790558015613a5357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b73ffffffffffffffffffffffffffffffffffffffff8216613aa5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061498e565b613ab182600083613a53565b613b0181604051806060016040528060228152602001614d1b6022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260fb6020526040902054919063ffffffff612f4016565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604090205560fd54613b3a908263ffffffff613ff316565b60fd5560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133b29085906143f7565b613a538363a9059cbb60e01b84846040516024016133df92919061433b565b60c95460ff16613be3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061451c565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613c34612c97565b604051613c4191906142f3565b60405180910390a1565b60c95460ff1615613c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613c34612c97565b600081613ce857600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff8411613d1e5782604085901b81613d1657fe5b049050613e35565b60c084811c6401000000008110613d37576020918201911c5b620100008110613d49576010918201911c5b6101008110613d5a576008918201911c5b60108110613d6a576004918201911c5b60048110613d7a576002918201911c5b60028110613d89576001820191505b60bf820360018603901c6001018260ff0387901b81613da457fe5b0492506fffffffffffffffffffffffffffffffff831115613dc457600080fd5b608085901c83026fffffffffffffffffffffffffffffffff8616840260c088901c604089901b82811015613df9576001820391505b608084901b92900382811015613e10576001820391505b829003608084901c8214613e2057fe5b888181613e2957fe5b04870196505050505050505b6fffffffffffffffffffffffffffffffff8111156118f457600080fd5b600082613e6157506000610a04565b82820282848281613e6e57fe5b04146118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061489f565b613ec58273ffffffffffffffffffffffffffffffffffffffff16614035565b613efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614c15565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051613f2491906142d7565b6000604051808303816000865af19150503d8060008114613f61576040519150601f19603f3d011682016040523d82523d6000602084013e613f66565b606091505b509150915081613fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147c5565b8051156134615780806020019051810190613fbd91906141df565b613461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614b4a565b60006118f483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f40565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611a14575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106140af57805160ff19168380011785556140dc565b828001600101855582156140dc579182015b828111156140dc5782518255916020019190600101906140c1565b506140e89291506140ec565b5090565b6109e991905b808211156140e857600081556001016140f2565b805169ffffffffffffffffffff81168114610a0457600080fd5b600060208284031215614131578081fd5b81356118f481614cf8565b6000806040838503121561414e578081fd5b823561415981614cf8565b9150602083013561416981614cf8565b809150509250929050565b600080600060608486031215614188578081fd5b833561419381614cf8565b925060208401356141a381614cf8565b929592945050506040919091013590565b600080604083850312156141c6578182fd5b82356141d181614cf8565b946020939093013593505050565b6000602082840312156141f0578081fd5b815180151581146118f4578182fd5b6000806040838503121561414e578182fd5b600060208284031215614222578081fd5b5035919050565b60006020828403121561423a578081fd5b5051919050565b60008060408385031215614253578182fd5b82359150602083013561416981614cf8565b600080600080600060a0868803121561427c578081fd5b6142868787614106565b94506020860151935060408601519250606086015191506142aa8760808801614106565b90509295509295909350565b6000602082840312156142c7578081fd5b815160ff811681146118f4578182fd5b600082516142e9818460208701614ccc565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156143e057835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016143ae565b50909695505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015261441f816040850160208701614ccc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526015908201527f544f54414c5f414d4f554e545f4f564552464c4f570000000000000000000000604082015260600190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f414d4f554e545f494e53554646494349454e5400000000000000000000000000604082015260600190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252600f908201527f444f4e545f53454e445f45544845520000000000000000000000000000000000604082015260600190565b60208082526014908201527f42414c414e43455f494e53554646494349454e54000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f554e41424c455f544f5f52455452494556455f4554485f505249434500000000604082015260600190565b60208082526015908201527f544f54414c5f535550504c595f4f564552464c4f570000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f414c4c4f57414e43455f494e53554646494349454e5400000000000000000000604082015260600190565b60208082526018908201527f554e4445524c5945525f544f54414c5f4f564552464c4f570000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252600b908201527f494e56414c49445f414747000000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f414d4f554e545f4f564552464c4f570000000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f494e53554646494349454e545f544f54414c5f535550504c5900000000000000604082015260600190565b60208082526011908201527f554e535550504f525445445f544f4b454e000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526006908201527f4c4f434b45440000000000000000000000000000000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b77ffffffffffffffffffffffffffffffffffffffffffffffff91909116815260200190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60005b83811015614ce7578181015183820152602001614ccf565b838111156134615750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4d57600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201e43b7f043475fd1dbe73dee638887e4a01c010c74dd312c7573306d5b51899e64736f6c63430006060033",
  "deployedBytecode": "0x6080604052600436106103015760003560e01c80637758f3fa1161018f578063a9059cbb116100e1578063e12799b11161008a578063f2fde38b11610064578063f2fde38b1461081a578063f83d08ba1461083a578063fa55819e1461084f57610341565b8063e12799b1146107d0578063ecb2bd76146107e5578063efe707a8146107fa57610341565b8063db006a75116100bb578063db006a7514610770578063dd62ed3e14610790578063df00018d146107b057610341565b8063a9059cbb1461070e578063c90b121a1461072e578063d3c7c2c71461074e57610341565b80638129fc1c116101435780639b38ee261161011d5780639b38ee26146106b9578063a457c2d7146106d9578063a69df4b5146106f957610341565b80638129fc1c1461067a5780638da5cb5b1461068f57806395d89b41146106a457610341565b80637d30c3e5116101745780637d30c3e51461061a5780637f8888161461063a5780637fa76bd71461065a57610341565b80637758f3fa146105f05780637b4361741461060557610341565b8063352110c01161025357806352631aea116101fc57806360b330ea116101d657806360b330ea146105a657806370a08231146105bb578063715018a6146105db57610341565b806352631aea1461054f5780635c975abb146105715780635ccf7ac41461058657610341565b80633e47158c1161022d5780633e47158c146104f85780634ee446081461051a57806351c6590a1461052f57610341565b8063352110c0146104a357806337929915146104c357806339509351146104d857610341565b806318160ddd116102b55780632ba8d9391161028f5780632ba8d939146104415780632c1e816d14610461578063313ce5671461048157610341565b806318160ddd146103ec57806323b872dd14610401578063267824e01461042157610341565b8063095ea7b3116102e6578063095ea7b314610388578063099ed69a146103b557806310aad3a9146103ca57610341565b806303edfcbd1461034657806306fdde031461035d57610341565b36610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614553565b60405180910390fd5b600080fd5b34801561035257600080fd5b5061035b61086f565b005b34801561036957600080fd5b50610372610937565b60405161037f9190614400565b60405180910390f35b34801561039457600080fd5b506103a86103a33660046141b4565b6109ec565b60405161037f91906143ec565b3480156103c157600080fd5b5061035b610a0a565b3480156103d657600080fd5b506103df610aba565b60405161037f91906143f7565b3480156103f857600080fd5b506103df610ac0565b34801561040d57600080fd5b506103a861041c366004614174565b610ac6565b34801561042d57600080fd5b506103df61043c366004614241565b610b6d565b34801561044d57600080fd5b5061035b61045c366004614120565b610c33565b34801561046d57600080fd5b5061035b61047c366004614120565b610e50565b34801561048d57600080fd5b50610496610ef4565b60405161037f9190614cbe565b3480156104af57600080fd5b506103df6104be366004614241565b610efe565b3480156104cf57600080fd5b5061035b610f91565b3480156104e457600080fd5b506103a86104f33660046141b4565b611041565b34801561050457600080fd5b5061050d6110a2565b60405161037f91906142f3565b34801561052657600080fd5b506103a86110bf565b34801561053b57600080fd5b5061035b61054a366004614211565b6110e1565b34801561055b57600080fd5b50610564611463565b60405161037f9190614c83565b34801561057d57600080fd5b506103a8611477565b34801561059257600080fd5b5061035b6105a13660046141ff565b611480565b3480156105b257600080fd5b506103a8611642565b3480156105c757600080fd5b506103df6105d6366004614120565b611665565b3480156105e757600080fd5b5061035b61168d565b3480156105fc57600080fd5b5061050d611758565b34801561061157600080fd5b5061035b611775565b34801561062657600080fd5b506103df610635366004614211565b61183c565b34801561064657600080fd5b506103df610655366004614211565b6118fb565b34801561066657600080fd5b5061035b610675366004614120565b611a1c565b34801561068657600080fd5b5061035b611ac0565b34801561069b57600080fd5b5061050d611c71565b3480156106b057600080fd5b50610372611c8d565b3480156106c557600080fd5b5061035b6106d4366004614241565b611d0c565b3480156106e557600080fd5b506103a86106f43660046141b4565b611efa565b34801561070557600080fd5b5061035b611f75565b34801561071a57600080fd5b506103a86107293660046141b4565b611fdb565b34801561073a57600080fd5b506103df610749366004614241565b611fef565b34801561075a57600080fd5b5061076361209c565b60405161037f9190614392565b34801561077c57600080fd5b5061035b61078b366004614211565b61216e565b34801561079c57600080fd5b506103df6107ab36600461413c565b6124ba565b3480156107bc57600080fd5b506103df6107cb366004614120565b6124f2565b3480156107dc57600080fd5b5061035b6125e8565b3480156107f157600080fd5b506103df61263a565b34801561080657600080fd5b5061050d610815366004614120565b612787565b34801561082657600080fd5b5061035b610835366004614120565b6127b0565b34801561084657600080fd5b5061035b6128e7565b34801561085b57600080fd5b5061035b61086a366004614241565b61294b565b610877612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146108cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790556040517fdc9e8a8421142a9ed626a213703c3c3ea7ac9d321094c3a8239784961857a87f90600090a1565b60fe8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050505090505b90565b6000610a006109f9612c97565b8484612c9b565b5060015b92915050565b610a12612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690556040517ff0261bb347838e4107df59bd80ad09cf7a3703e484bd3cd4167634c1d41e60c690600090a1565b6103e881565b60fd5490565b6000610ad3848484612daa565b610b6384610adf612c97565b610b5e85604051806060016040528060288152602001614d636028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260fc6020526040812090610b2a612c97565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff612f4016565b612c9b565b5060019392505050565b600080610b79836124f2565b905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb91906142b6565b60ff1690506000610c2986610c1a85600a86900a63ffffffff612f8616565b600f0b9063ffffffff612fcf16565b9695505050505050565b610c3b612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8116610cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061478e565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261012f6020526040908190205490517fe1d81e4ca82f175dfdce152bfeb5c2b4d3bf71dc7fccf6283c55bd27e6a22ae592610d38928592911690614314565b60405180910390a173ffffffffffffffffffffffffffffffffffffffff8116600090815261012f6020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b61013054811015610e4b578173ffffffffffffffffffffffffffffffffffffffff166101308281548110610dbd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610e435760006101308281548110610df557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610e4d565b600101610d8d565b505b50565b610e58612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101005460ff1690565b600080610f0a84613051565b90506000610f1661263a565b90506fffffffffffffffffffffffffffffffff811115610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614757565b6000610f78600f84900b8363ffffffff612fcf16565b90506000610f868287611fef565b979650505050505050565b610f99612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f8710e363d0b73d2b34e9c5db1cfdeac689eda396272ebb0996410c22a32bb52090600090a1565b6000610a0061104e612c97565b84610b5e8560fc600061105f612c97565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61314916565b61012d5473ffffffffffffffffffffffffffffffffffffffff1681565b61012d5474010000000000000000000000000000000000000000900460ff1681565b60975460ff1661111d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff1615611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d5474010000000000000000000000000000000000000000900460ff16156111d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008111611212576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b61012e546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9061126b9033903090600401614314565b60206040518083038186803b15801561128357600080fd5b505afa158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb9190614229565b10156112f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614720565b61012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319061134b9030906004016142f3565b60206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190614229565b905060006113a98383613188565b90506113b533826132b1565b61012e546113e19073ffffffffffffffffffffffffffffffffffffffff1633308663ffffffff6133be16565b3373ffffffffffffffffffffffffffffffffffffffff167fa1191a508aeb71ebb602bcbf73ee2faa335fb7116351aed59b3a76e1199395b682858560405161142b93929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b6fffffffffffffffffffffffffffffffff81565b60c95460ff1690565b611488612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146114dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8216611529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061478e565b73ffffffffffffffffffffffffffffffffffffffff8116611576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614831565b73ffffffffffffffffffffffffffffffffffffffff808316600081815261012f602052604080822080549486167fffffffffffffffffffffffff0000000000000000000000000000000000000000958616179055610130805460018101825592527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf349091018054909316909117909155517f7a043b40c33a3ae419ba0582985274add1f9af1868414daccfa46d00b792a604906116369084908490614314565b60405180910390a15050565b61012d547501000000000000000000000000000000000000000000900460ff1681565b73ffffffffffffffffffffffffffffffffffffffff16600090815260fb602052604090205490565b611695612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146116e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b60655460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b61012e5473ffffffffffffffffffffffffffffffffffffffff1681565b61177d612c97565b60655473ffffffffffffffffffffffffffffffffffffffff9081169116146117d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012d80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517f74575b08abfa9e3fb5439ba1f85bc043f5a282e848d6ac9b58f7fe054a72e49590600090a1565b61012e546040517f70a08231000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906118989030906004016142f3565b60206040518083038186803b1580156118b057600080fd5b505afa1580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e89190614229565b90506118f48382613188565b9392505050565b60008061190783613051565b61012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906119649030906004016142f3565b60206040518083038186803b15801561197c57600080fd5b505afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190614229565b90506fffffffffffffffffffffffffffffffff811115611a00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614757565b611a14600f83900b8263ffffffff612fcf16565b949350505050565b611a24612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614611a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b61012e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff1680611ad95750611ad9613467565b80611ae7575060005460ff16155b611b1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff16158015611b8357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b611b8b61346d565b611b93613561565b611b9b6136d2565b611ba36137f1565b611c176040518060400160405280600e81526020017f41505920506f6f6c20546f6b656e0000000000000000000000000000000000008152506040518060400160405280600381526020017f415054000000000000000000000000000000000000000000000000000000000081525061390d565b61012d80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1690558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b60655473ffffffffffffffffffffffffffffffffffffffff1690565b60ff8054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109e15780601f106109b6576101008083540402835291602001916109e1565b60975460ff16611d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff1615611dad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d547501000000000000000000000000000000000000000000900460ff1615611e04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008211611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b611e4733611665565b821115611e80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061458a565b6000611e8c8383610efe565b9050611e983384613a58565b611ebf73ffffffffffffffffffffffffffffffffffffffff8316338363ffffffff613b8816565b337ffc57247add5757285c9d2af9251b2bb72a1b63dd5a4b341004bf915f753d01248483611eeb61263a565b60405161142b93929190614ca8565b6000610a00611f07612c97565b84610b5e85604051806060016040528060258152602001614d8b6025913960fc6000611f31612c97565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff612f4016565b611f7d612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b611fd9613ba7565b565b6000610a00611fe8612c97565b8484612daa565b600080611ffb836124f2565b905060008373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561204557600080fd5b505afa158015612059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207d91906142b6565b60ff1690506000610c29600a83900a610c1a888663ffffffff612f8616565b61013054606090819067ffffffffffffffff811180156120bb57600080fd5b506040519080825280602002602001820160405280156120e5578160200160208202803683370190505b50905060005b6101305481101561216857610130818154811061210457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061213b57fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016120eb565b50905090565b60975460ff166121aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff161561220f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d547501000000000000000000000000000000000000000000900460ff1615612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b600081116122a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b6122a933611665565b8111156122e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061458a565b60006122ed826118fb565b90506122f93383613a58565b61012e546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90612352903390859060040161433b565b602060405180830381600087803b15801561236c57600080fd5b505af1158015612380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a491906141df565b5061012e546040517f70a0823100000000000000000000000000000000000000000000000000000000815233917ffc57247add5757285c9d2af9251b2bb72a1b63dd5a4b341004bf915f753d0124918591859173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906124249030906004016142f3565b60206040518083038186803b15801561243c57600080fd5b505afa158015612450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124749190614229565b60405161248393929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260fc6020908152604080832093909416825291909152205490565b73ffffffffffffffffffffffffffffffffffffffff808216600090815261012f60205260408082205481517ffeaf968c0000000000000000000000000000000000000000000000000000000081529151929316918391839163feaf968c9160048082019260a092909190829003018186803b15801561257057600080fd5b505afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190614265565b505050915050600081136118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061467b565b61012d5473ffffffffffffffffffffffffffffffffffffffff163314611fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906149eb565b600080805b6101305481101561216857600073ffffffffffffffffffffffffffffffffffffffff16610130828154811061267057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16141561269d5761277f565b600061013082815481106126ad57fe5b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911692506127689083906370a08231906127129030906004016142f3565b60206040518083038186803b15801561272a57600080fd5b505afa15801561273e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127629190614229565b83610b6d565b905061277a848263ffffffff61314916565b935050505b60010161263f565b61012f6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6127b8612c97565b60655473ffffffffffffffffffffffffffffffffffffffff90811691161461280c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b73ffffffffffffffffffffffffffffffffffffffff8116612859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906145c1565b60655460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6128ef612c97565b60655473ffffffffffffffffffffffffffffffffffffffff908116911614612943576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906148fc565b611fd9613c4b565b60975460ff16612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614bde565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560c95460ff16156129ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b61012d5474010000000000000000000000000000000000000000900460ff1615612a42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614ba7565b60008211612a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906144e5565b73ffffffffffffffffffffffffffffffffffffffff818116600090815261012f602052604090205416612adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614b13565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e90612b319033903090600401614314565b60206040518083038186803b158015612b4957600080fd5b505afa158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b819190614229565b1015612bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614720565b6000612bc58383610b6d565b90506000612bd161263a565b90506000612bdf8383613188565b9050612beb33826132b1565b612c1373ffffffffffffffffffffffffffffffffffffffff851633308863ffffffff6133be16565b3373ffffffffffffffffffffffffffffffffffffffff167fa1191a508aeb71ebb602bcbf73ee2faa335fb7116351aed59b3a76e1199395b6828785604051612c5d93929190614ca8565b60405180910390a25050609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316612ce8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614a7f565b73ffffffffffffffffffffffffffffffffffffffff8216612d35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061461e565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260fc602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612d9d9085906143f7565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316612df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614a22565b73ffffffffffffffffffffffffffffffffffffffff8216612e44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614488565b612e4f838383613a53565b612e9f81604051806060016040528060268152602001614d3d6026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260fb6020526040902054919063ffffffff612f4016565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260fb60205260408082209390935590841681522054612ee1908263ffffffff61314916565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260fb602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612d9d9085906143f7565b60008184841115612f7e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389190614400565b505050900390565b600081612f9257600080fd5b6000612f9e8484613cdc565b90506f7fffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff821611156118f457600080fd5b600081612fde57506000610a04565b600083600f0b1215612fef57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff81111561303857600080fd5b60401b811981111561304957600080fd5b019392505050565b60006fffffffffffffffffffffffffffffffff82111561309d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614868565b60006130a7610ac0565b116130de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614adc565b6fffffffffffffffffffffffffffffffff6130f7610ac0565b111561312f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146b2565b60006118f461313c610ac0565b849063ffffffff612f8616565b6000828201838110156118f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146e9565b600080613193610ac0565b90508215806131a0575080155b156131bf576131b7846103e863ffffffff613e5216565b915050610a04565b6fffffffffffffffffffffffffffffffff841115613209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614868565b6fffffffffffffffffffffffffffffffff831115613253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614451565b6fffffffffffffffffffffffffffffffff81111561329d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906146b2565b611a1481610c1a868663ffffffff612f8616565b73ffffffffffffffffffffffffffffffffffffffff82166132fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614c4c565b61330a60008383613a53565b60fd5461331d908263ffffffff61314916565b60fd5573ffffffffffffffffffffffffffffffffffffffff8216600090815260fb6020526040902054613356908263ffffffff61314916565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260fb60205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133b29085906143f7565b60405180910390a35050565b613461846323b872dd60e01b8585856040516024016133df93929190614361565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ea6565b50505050565b303b1590565b600054610100900460ff16806134865750613486613467565b80613494575060005460ff16155b6134ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561353057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b8015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061357a575061357a613467565b80613588575060005460ff16155b6135be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561362457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b600061362e612c97565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff16806136eb57506136eb613467565b806136f9575060005460ff16155b61372f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff1615801561379557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061380a575061380a613467565b80613818575060005460ff16155b61384e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff161580156138b457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558015610e4d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff16806139265750613926613467565b80613934575060005460ff16155b61396a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614931565b600054610100900460ff161580156139d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b82516139e39060fe90602086019061406e565b5081516139f79060ff90602085019061406e565b5061010080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660121790558015613a5357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b73ffffffffffffffffffffffffffffffffffffffff8216613aa5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061498e565b613ab182600083613a53565b613b0181604051806060016040528060228152602001614d1b6022913973ffffffffffffffffffffffffffffffffffffffff8516600090815260fb6020526040902054919063ffffffff612f4016565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb602052604090205560fd54613b3a908263ffffffff613ff316565b60fd5560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133b29085906143f7565b613a538363a9059cbb60e01b84846040516024016133df92919061433b565b60c95460ff16613be3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061451c565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613c34612c97565b604051613c4191906142f3565b60405180910390a1565b60c95460ff1615613c88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147fa565b60c980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613c34612c97565b600081613ce857600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff8411613d1e5782604085901b81613d1657fe5b049050613e35565b60c084811c6401000000008110613d37576020918201911c5b620100008110613d49576010918201911c5b6101008110613d5a576008918201911c5b60108110613d6a576004918201911c5b60048110613d7a576002918201911c5b60028110613d89576001820191505b60bf820360018603901c6001018260ff0387901b81613da457fe5b0492506fffffffffffffffffffffffffffffffff831115613dc457600080fd5b608085901c83026fffffffffffffffffffffffffffffffff8616840260c088901c604089901b82811015613df9576001820391505b608084901b92900382811015613e10576001820391505b829003608084901c8214613e2057fe5b888181613e2957fe5b04870196505050505050505b6fffffffffffffffffffffffffffffffff8111156118f457600080fd5b600082613e6157506000610a04565b82820282848281613e6e57fe5b04146118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103389061489f565b613ec58273ffffffffffffffffffffffffffffffffffffffff16614035565b613efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614c15565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051613f2491906142d7565b6000604051808303816000865af19150503d8060008114613f61576040519150601f19603f3d011682016040523d82523d6000602084013e613f66565b606091505b509150915081613fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906147c5565b8051156134615780806020019051810190613fbd91906141df565b613461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890614b4a565b60006118f483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f40565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611a14575050151592915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106140af57805160ff19168380011785556140dc565b828001600101855582156140dc579182015b828111156140dc5782518255916020019190600101906140c1565b506140e89291506140ec565b5090565b6109e991905b808211156140e857600081556001016140f2565b805169ffffffffffffffffffff81168114610a0457600080fd5b600060208284031215614131578081fd5b81356118f481614cf8565b6000806040838503121561414e578081fd5b823561415981614cf8565b9150602083013561416981614cf8565b809150509250929050565b600080600060608486031215614188578081fd5b833561419381614cf8565b925060208401356141a381614cf8565b929592945050506040919091013590565b600080604083850312156141c6578182fd5b82356141d181614cf8565b946020939093013593505050565b6000602082840312156141f0578081fd5b815180151581146118f4578182fd5b6000806040838503121561414e578182fd5b600060208284031215614222578081fd5b5035919050565b60006020828403121561423a578081fd5b5051919050565b60008060408385031215614253578182fd5b82359150602083013561416981614cf8565b600080600080600060a0868803121561427c578081fd5b6142868787614106565b94506020860151935060408601519250606086015191506142aa8760808801614106565b90509295509295909350565b6000602082840312156142c7578081fd5b815160ff811681146118f4578182fd5b600082516142e9818460208701614ccc565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156143e057835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016143ae565b50909695505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015261441f816040850160208701614ccc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526015908201527f544f54414c5f414d4f554e545f4f564552464c4f570000000000000000000000604082015260600190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f414d4f554e545f494e53554646494349454e5400000000000000000000000000604082015260600190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252600f908201527f444f4e545f53454e445f45544845520000000000000000000000000000000000604082015260600190565b60208082526014908201527f42414c414e43455f494e53554646494349454e54000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f554e41424c455f544f5f52455452494556455f4554485f505249434500000000604082015260600190565b60208082526015908201527f544f54414c5f535550504c595f4f564552464c4f570000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f414c4c4f57414e43455f494e53554646494349454e5400000000000000000000604082015260600190565b60208082526018908201527f554e4445524c5945525f544f54414c5f4f564552464c4f570000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f544f4b454e00000000000000000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252600b908201527f494e56414c49445f414747000000000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f414d4f554e545f4f564552464c4f570000000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f494e53554646494349454e545f544f54414c5f535550504c5900000000000000604082015260600190565b60208082526011908201527f554e535550504f525445445f544f4b454e000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526006908201527f4c4f434b45440000000000000000000000000000000000000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b77ffffffffffffffffffffffffffffffffffffffffffffffff91909116815260200190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60005b83811015614ce7578181015183820152602001614ccf565b838111156134615750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4d57600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201e43b7f043475fd1dbe73dee638887e4a01c010c74dd312c7573306d5b51899e64736f6c63430006060033",
  "devdoc": {
    "methods": {
      "addLiquidity(uint256)": {
        "details": "If no APT tokens have been minted yet, fallback to a fixed ratio."
      },
      "addLiquidityV2(uint256,address)": {
        "details": "If no APT tokens have been minted yet, fallback to a fixed ratio."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getUnderlyerAmount(uint256)": {
        "params": {
          "aptAmount": "The amount of APT tokens"
        },
        "returns": {
          "_0": "uint256 The underlying value of the APT tokens"
        }
      },
      "getUnderlyerAmountV2(uint256,address)": {
        "params": {
          "aptAmount": "The amount of APT tokens"
        },
        "returns": {
          "_0": "uint256 The underlying value of the APT tokens"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(uint256)": {
        "params": {
          "aptAmount": "The amount of APT tokens to redeem"
        }
      },
      "redeemV2(uint256,address)": {
        "params": {
          "aptAmount": "The amount of APT tokens to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setUnderlyerAddress(address)": {
        "details": "called during deployment"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "addLiquidity(uint256)": {
        "notice": "Mint corresponding amount of APT supported for sent token amount."
      },
      "addLiquidityV2(uint256,address)": {
        "notice": "Mint corresponding amount of APT tokens for sent token amount."
      },
      "getUnderlyerAmount(uint256)": {
        "notice": "Get the underlying amount represented by APT amount."
      },
      "getUnderlyerAmountV2(uint256,address)": {
        "notice": "Get the underlying amount represented by APT amount."
      },
      "redeem(uint256)": {
        "notice": "Redeems APT amount for its underlying token amount."
      },
      "redeemV2(uint256,address)": {
        "notice": "Redeems APT amount for its underlying token amount."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1304,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1306,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1371,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1298,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1383,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1501,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2721,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_notEntered",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2762,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2623,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 2712,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1722,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_balances",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1728,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_allowances",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1730,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 1732,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_name",
        "offset": 0,
        "slot": "254",
        "type": "t_string_storage"
      },
      {
        "astId": 1734,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_symbol",
        "offset": 0,
        "slot": "255",
        "type": "t_string_storage"
      },
      {
        "astId": 1736,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_decimals",
        "offset": 0,
        "slot": "256",
        "type": "t_uint8"
      },
      {
        "astId": 2231,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 7407,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 7409,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "addLiquidityLock",
        "offset": 20,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 7411,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "redeemLock",
        "offset": 21,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 7413,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "underlyer",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)2310"
      },
      {
        "astId": 7417,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "priceAggs",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_contract(IERC20)2310,t_contract(AggregatorV3Interface)45)"
      },
      {
        "astId": 7420,
        "contract": "contracts/APYLiquidityPoolImplementation.sol:APYLiquidityPoolImplementation",
        "label": "_supportedTokens",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_contract(IERC20)2310)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)2310)dyn_storage": {
        "base": "t_contract(IERC20)2310",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2310": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2310,t_contract(AggregatorV3Interface)45)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2310",
        "label": "mapping(contract IERC20 => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)45"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "3988200",
      "executionCost": "4555",
      "totalCost": "3992755"
    },
    "external": {
      "DEFAULT_APT_TO_UNDERLYER_FACTOR()": "341",
      "MAX_UINT128()": "308",
      "addLiquidity(uint256)": "infinite",
      "addLiquidityLock()": "1141",
      "addLiquidityV2(uint256,address)": "infinite",
      "addTokenSupport(address,address)": "infinite",
      "allowance(address,address)": "infinite",
      "approve(address,uint256)": "22599",
      "balanceOf(address)": "1329",
      "calculateMintAmount(uint256)": "infinite",
      "decimals()": "1158",
      "decreaseAllowance(address,uint256)": "infinite",
      "getPoolTotalEthValue()": "infinite",
      "getSupportedTokens()": "infinite",
      "getTokenAmountEthValue(uint256,address)": "infinite",
      "getTokenAmountFromEthValue(uint256,address)": "infinite",
      "getTokenEthPrice(address)": "infinite",
      "getUnderlyerAmount(uint256)": "infinite",
      "getUnderlyerAmountV2(uint256,address)": "infinite",
      "increaseAllowance(address,uint256)": "infinite",
      "initialize()": "infinite",
      "initializeUpgrade()": "1161",
      "lock()": "infinite",
      "lockAddLiquidity()": "22691",
      "lockRedeem()": "22670",
      "name()": "infinite",
      "owner()": "1136",
      "paused()": "1130",
      "priceAggs(address)": "1363",
      "proxyAdmin()": "1114",
      "redeem(uint256)": "infinite",
      "redeemLock()": "1118",
      "redeemV2(uint256,address)": "infinite",
      "removeTokenSupport(address)": "infinite",
      "renounceOwnership()": "24273",
      "setAdminAddress(address)": "22083",
      "setUnderlyerAddress(address)": "22105",
      "symbol()": "infinite",
      "totalSupply()": "1097",
      "transfer(address,uint256)": "infinite",
      "transferFrom(address,address,uint256)": "infinite",
      "transferOwnership(address)": "24424",
      "underlyer()": "1115",
      "unlock()": "infinite",
      "unlockAddLiquidity()": "22685",
      "unlockRedeem()": "22685"
    },
    "internal": {
      "_calculateMintAmount(uint256,uint256)": "infinite",
      "_getShareOfAPT(uint256)": "infinite"
    }
  }
}